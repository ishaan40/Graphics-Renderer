--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=4 LPM_WIDTHB=5 LPM_WIDTHP=9 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_mult 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_padd 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ cbx_util_mgl 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 37 
SUBDESIGN mult_i1t
( 
	dataa[3..0]	:	input;
	datab[4..0]	:	input;
	result[8..0]	:	output;
) 
VARIABLE
	add10_result[5..0]	:	WIRE;
	add6_result[8..0]	:	WIRE;
	cs1a[1..0] : carry_sum;
	cs3a[1..0] : carry_sum;
	le2a[5..0] : lcell;
	le4a[5..0] : lcell;
	le5a[5..0] : lcell;
	sft11a[5..0] : soft;
	sft12a[5..0] : soft;
	sft13a[5..0] : soft;
	sft7a[8..0] : soft;
	sft8a[8..0] : soft;
	sft9a[8..0] : soft;
	dataa_node[4..0]	: WIRE;
	datab_node[3..0]	: WIRE;
	final_result_node[8..0]	: WIRE;
	w107w	: WIRE;
	w149w[8..0]	: WIRE;
	w59w[5..0]	: WIRE;
	w7w[3..0]	: WIRE;
	w8w[5..0]	: WIRE;
	w98w	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add6_result[] = sft7a[].out + sft8a[].out;
	cs1a[].cin = ( B"0", datab_node[1..1]);
	cs1a[].sin = ( cs1a[0].cout, datab_node[1..1]);
	cs3a[].cin = ( B"0", datab_node[1..1]);
	cs3a[].sin = ( (w7w[2..2] $ cs3a[0].cout), datab_node[0..0]);
	le2a[].in = (((((w7w[3..3] & (! w7w[2..2])) & (! cs1a[1].sout)) & (! ( dataa_node[], B"0"))) # ((((! w7w[3..3]) & w7w[2..2]) & cs1a[1].sout) & ( dataa_node[], B"0"))) # ((w7w[3..3] & w7w[2..2]) & cs1a[1].sout));
	le4a[].in = (! ((! le2a[].out) & (! (cs3a[1].sout & (w7w[3..3] $ ( dataa_node[4..4], dataa_node[]))))));
	le5a[].in = (! ((! (((! ( dataa_node[], B"0")) & cs1a[0].sout) & (! cs3a[0].sout))) & (! ((((! ( dataa_node[4..4], dataa_node[])) & cs1a[0].sout) & cs3a[0].sout) # ((( dataa_node[4..4], dataa_node[]) & (! cs1a[0].sout)) & cs3a[0].sout)))));
	sft11a[].in = ( w107w, ( w98w, ( w98w, ( le5a[4..4].out, ( le5a[3..2].out)))));
	sft12a[].in = ( w107w, ( w107w, ( (! w59w[5..5]), ( w107w, ( w107w, w7w[3..3])))));
	sft13a[].in = add10_result[];
	sft7a[].in = ( w98w, ( (! w8w[5..5]), ( le4a[4..4].out, ( le4a[3..3].out, ( le4a[2..2].out, ( le4a[1..1].out, ( le4a[0..0].out, ( le5a[1..0].out))))))));
	sft8a[].in = ( w107w, ( sft13a[5..5].out, ( sft13a[4..4].out, ( sft13a[3..3].out, ( sft13a[2..2].out, ( sft13a[1..1].out, ( sft13a[0..0].out, ( w107w, cs1a[0].sout))))))));
	sft9a[].in = add6_result[];
	dataa_node[] = ( datab[4..0]);
	datab_node[] = ( dataa[3..0]);
	final_result_node[] = ( w149w[8..0]);
	result[] = ( final_result_node[8..0]);
	w107w = B"0";
	w149w[] = ( sft9a[8..7].out, sft9a[6..5].out, sft9a[4..3].out, sft9a[2..1].out, sft9a[0..0].out);
	w59w[] = le5a[].out;
	w7w[] = datab_node[];
	w8w[] = le4a[].out;
	w98w = B"1";
END;
--VALID FILE
